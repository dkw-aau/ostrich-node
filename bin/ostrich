#!/usr/bin/env node
// Parse command-line arguments
var args = require('minimist')(process.argv.slice(2), { alias:
      { query: 'q', offset: 'o', limit: 'l', format: 'f', version: 'v' },
    }),
    ostrichPath = args._[0],
    query  = typeof args.query  === 'string' ? args.query  : '',
    format = typeof args.format === 'string' ? args.format : 'text/turtle',
    offset = /^\d+$/.test(args.offset) ? args.offset : 0,
    limit  = /^\d+$/.test(args.limit)  ? args.limit  : 0,
    version = /^\d+$/.test(args.limit)  ? args.version  : null;

// Verify the arguments
if (args._.length !== 1 || args.h || args.help) {
  console.error("usage: ostrich dataset/ --query '?s ?p ?o' --offset 200 --limit 100 --version 1 --format turtle");
  process.exit(1);
}

var ostrich = require('../lib/ostrich'),
    N3 = require('n3');

// Prepare the query and the result writer
var parts = /^\s*<?([^\s>]*)>?\s*<?([^\s>]*)>?\s*<?([^]*?)>?\s*$/.exec(query),
    subject   = parts[1][0] !== '?' && parts[1] || null,
    predicate = parts[2][0] !== '?' && parts[2] || null,
    object    = parts[3][0] !== '?' && parts[3] || null;
var writer = new N3.Writer(process.stdout, { format: format, end: false });

// Load Ostrich
ostrich.fromPath(ostrichPath, function (error, ostrichStore) {
  if (error) console.error(error.message), process.exit(1);

  // Search the Ostrich store for the given pattern
  ostrichStore.search(subject, predicate, object, { offset: offset, limit: limit, version: version },
    function (error, triples, totalCount, exactCount) {
      // Write all matching triples
      if (error) console.error('Error:', error.message), process.exit(1);
      process.stdout.write('# Total matches: ' + totalCount +
                           (exactCount ? '' : ' (estimated)') + '\n');
      writer.addTriples(triples);
      writer.end();
      ostrichStore.close();
    });
});
