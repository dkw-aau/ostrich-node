#!/usr/bin/env node
// Parse command-line arguments
var args = require('minimist')(process.argv.slice(2), { alias:
      { queryversionmaterialized: 'qvm', querydeltamaterialized: 'qdm', queryversion: 'qv', offset: 'o', limit: 'l', format: 'f', version: 'v', versionStart: 'vs', versionEnd: 've' },
    }),
    ostrichPath = args._[0],
    queryvm  = typeof args.queryversionmaterialized  === 'string' ? args.queryversionmaterialized  : '',
    querydm  = typeof args.querydeltamaterialized  === 'string' ? args.querydeltamaterialized  : '',
    queryv  = typeof args.queryversion  === 'string' ? args.queryversion  : '',
    query  = queryvm || querydm || queryv,
    format = typeof args.format === 'string' ? args.format : 'text/turtle',
    offset = /^\d+$/.test(args.offset)   ? args.offset : 0,
    limit  = /^\d+$/.test(args.limit)    ? args.limit  : 0,
    version = /^\d+$/.test(args.version) ? args.version  : null,
    versionStart = /^\d+$/.test(args.versionStart) ? args.versionStart  : null,
    versionEnd = /^\d+$/.test(args.versionEnd)     ? args.versionEnd  : null;

// Verify the arguments
if (args._.length !== 1 || args.h || args.help || !query) {
  console.error("usage: ostrich dataset.ostrich --queryversionmaterialized '?s ?p ?o' --offset 200 --limit 100 --version 1 --format turtle");
  console.error("usage: ostrich dataset.ostrich --querydeltamaterialized '?s ?p ?o' --offset 200 --limit 100 --versionStart 0 --versionEnd 2 --format turtle");
  console.error("usage: ostrich dataset.ostrich --queryversion '?s ?p ?o' --offset 200 --limit 100 --format turtle");
  process.exit(1);
}

var ostrich = require('../lib/ostrich'),
    N3 = require('n3');

// Prepare the query and the result writer
var parts = /^\s*<?([^\s>]*)>?\s*<?([^\s>]*)>?\s*<?([^]*?)>?\s*$/.exec(query),
    subject   = parts[1][0] !== '?' && parts[1] || null,
    predicate = parts[2][0] !== '?' && parts[2] || null,
    object    = parts[3][0] !== '?' && parts[3] || null;
var writer = new N3.Writer(process.stdout, { format: format, end: false });

// Load Ostrich
ostrich.fromPath(ostrichPath, function (error, ostrichStore) {
  if (error) console.error(error.message), process.exit(1);

  // Search the Ostrich store for the given pattern and query type
  if (queryvm) {
    ostrichStore.searchTriplesVersionMaterialized(subject, predicate, object, { offset: offset, limit: limit, version: version },
      function (error, triples, totalCount, exactCount) {
        // Write all matching triples
        if (error) console.error('Error:', error.message), process.exit(1);
        process.stdout.write('# Total matches: ' + totalCount +
          (exactCount ? '' : ' (estimated)') + '\n');
        writer.addTriples(triples);
        writer.end();
        ostrichStore.close();
      });
  }
  else if (querydm) {
    ostrichStore.searchTriplesDeltaMaterialized(subject, predicate, object, { offset: offset, limit: limit, versionStart: versionStart, versionEnd: versionEnd },
      function (error, triples, totalCount, exactCount) {
        // Write all matching triples
        if (error) console.error('Error:', error.message), process.exit(1);
        process.stdout.write('# Total matches: ' + totalCount +
          (exactCount ? '' : ' (estimated)') + '\n');
        triples.forEach(function (triple) {
          writer._write(triple.addition ? '+ ' : '- ');
          writer._writeTripleLine(triple.subject, triple.predicate, triple.object);
        });
        writer.end();
        ostrichStore.close();
      });
  }
  else if (queryv) {
    ostrichStore.searchTriplesVersion(subject, predicate, object, { offset: offset, limit: limit },
      function (error, triples, totalCount, exactCount) {
        // Write all matching triples
        if (error) console.error('Error:', error.message), process.exit(1);
        process.stdout.write('# Total matches: ' + totalCount +
          (exactCount ? '' : ' (estimated)') + '\n');
        triples.forEach(function (triple) {
          writer._writeTripleLine(triple.subject, triple.predicate, triple.object);
          writer._write('    >> ' + JSON.stringify(triple.versions) + '\n');
        });
        writer.end();
        ostrichStore.close();
      });
  }
});
